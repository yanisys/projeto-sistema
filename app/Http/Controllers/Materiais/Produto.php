<?phpnamespace App\Http\Controllers\Materiais;use App\Mail\mailTeste;//use Carbon\Carbon;use Illuminate\Support\Facades\DB;use Illuminate\Http\Request;use Illuminate\Support\Facades\Validator;use App\Http\Controllers\Controller;use Illuminate\Support\Facades\Log;class Produto extends Controller{    public function __construct(){        $this->middleware('auth');        $this->middleware('configuraSessao');        $this->middleware('requestFilter');    }    public function index(){        $data['headerText'] = 'Objetiva Sistema de Saúde';        $data['breadcrumbs'][] = ['titulo' => 'Início', 'href' => route('home')];        $data['breadcrumbs'][] = ['titulo' => 'Materiais','href' => route('materiais/produtos')];        return view('materiais/produtos', $data);    }    public function cadastrar($id = null, Request $request)    {        verficaPermissao('recurso.materiais/produto');        $descricao = "";        if (!empty($id) && empty($_POST['cd_produto'])) {            $titulo = DB::table('produto')->where('cd_produto', $id)->select('nm_produto')->first();            $descricao = ": ".$titulo->nm_produto;        }        $data['headerText'] = 'Cadastro de Produto'.$descricao;        $data['breadcrumbs'][] = ['titulo' => 'Início', 'href' => route('home')];        $data['breadcrumbs'][] = ['titulo' => 'Materiais', 'href' => route('materiais/produtos')];        $data['breadcrumbs'][] = ['titulo' => 'Produto', 'href' => route('materiais/produto/lista')];        $data['breadcrumbs'][] = ['titulo' => 'Cadastrar', 'href' => route('materiais/produto/cadastro')];        $planos = DB::table('estabelecimentos')->where('cd_estabelecimento', session('estabelecimento'))->select('tp_plano')->first();        if (isset($planos->tp_plano)){            $planos_disponiveis = str_split($planos->tp_plano);            $where = "";            foreach ($planos_disponiveis as $key => $p) {                if ($key > 0) {                    $where .= " or ";                }                $where .= "tp_plano = '" . $p . "'";            }            $data['planos'] =                DB::select("Select p.cd_plano, p.ds_plano".($id != null ?", pp.cd_produto_plano, pp.preco, pp.status " : " ").                    "from plano as p ".                    ($id != null ? "left join produto_plano as pp on pp.cd_plano = p.cd_plano and pp.cd_estabelecimento = ".session('estabelecimento'). " and pp.cd_produto = $id " : "").                    "where $where");        }        $data['produto_movimentado'] = false;        $movimentação_previa = DB::table('movimentacao_itens')->where('cd_produto',$id)->first();        if(isset($movimentação_previa))            $data['produto_movimentado'] = true;        $unidades_comerciais = DB::table('unidades_comerciais')->get();        foreach ($unidades_comerciais as $u)            $data['unidades_comerciais'][$u->cd_unidade_comercial] = $u->descricao;        $unidades_medida = DB::table('unidade_medida')->where('situacao','A')->get();        $data['unidades_medida'][0] = "Não se aplica (NA)";        foreach ($unidades_medida as $um)            $data['unidades_medida'][$um->cd_unidade_medida] = $um->nm_unidade_medida." (".$um->abreviacao.")";            $this->id = $id;        $data['via_aplicacao_medicamentos'] = DB::table('via_aplicacao_medicamentos as vam')            ->leftJoin('produto_via_aplicacao as pva', function($join)            {                $join->on('pva.cd_via_aplicacao','=','vam.cd_via_aplicacao_medicamentos')                    ->where('pva.cd_produto',$this->id);            })            ->orderBy('sigla')            ->select('vam.cd_via_aplicacao_medicamentos','vam.nome','vam.sigla','pva.cd_via_aplicacao as existe')            ->get();        if (!empty($id) && empty($_POST['cd_produto'])) {            $produto = DB::table('produto as p')                ->leftJoin('movimentacao_itens as mi','mi.cd_produto','p.cd_produto')                ->leftJoin('movimentacao_itens_nfe as min','min.cd_movimentacao_itens','mi.cd_movimentacao_itens')                ->leftJoin('kits as k','k.cd_kit','p.cd_kit_vinculado')                ->where('p.cd_produto', $id)                ->select('p.*','k.nm_kit','min.vUnCom as vlr_ultima_compra')                ->get();            if (isset($produto[0])) {                $array = (array)$produto[0];                $data['produto'] = $array;                $update = false;            }            $data['estoque'] = DB::table('movimentacao as m')                ->leftJoin('movimentacao_itens as mi', 'mi.cd_movimentacao', 'm.cd_movimentacao')                ->leftJoin('produto as p', 'p.cd_produto', 'mi.cd_produto')                ->leftJoin('sala as l', 'l.cd_sala', 'mi.cd_sala')                ->where('mi.cd_produto',$id)                ->select('l.nm_sala', 'mi.cd_produto', 'mi.lote', 'p.nm_produto', DB::raw("sum(if(m.tp_saldo = 'A',mi.quantidade,if(m.tp_saldo = 'S', - mi.quantidade,0))) as quantidade"))                ->groupBy('l.nm_sala', 'mi.cd_produto', 'mi.lote','p.nm_produto')                ->paginate(30)                ->appends($_REQUEST);        } else {            $data['produto'] = $_POST;            $update = true;        }        $data['divisao'][0] = $data['grupo'][0] = $data['sub_grupo'][0] = 'Nenhum item selecionado';        $divisao = DB::table('produto_divisao')->where('cd_estabelecimento',session('estabelecimento'))->get();        foreach($divisao as $d) {            $data['divisao'][$d->cd_produto_divisao] = $d->nm_produto_divisao;            $grupo = DB::table('produto_grupo')->where('cd_produto_divisao', $d->cd_produto_divisao)->get();            foreach ($grupo as $g) {                $data['grupo'][$g->cd_produto_grupo] = $g->nm_produto_grupo;                $sub_grupo = DB::table('produto_sub_grupo')->where('cd_produto_grupo', $g->cd_produto_grupo)->get();                foreach ($sub_grupo as $sg) {                    $data['sub_grupo'][$sg->cd_produto_sub_grupo] = $sg->nm_produto_sub_grupo;                }            }        }        if ($request->isMethod('post')) {            $tabProdutos = new \app\Models\Produto();            $dados = $request->except(['_token', 'cd_produto']);            $via = $request['via_aplicacao'];            $dados['aviso_vencimento'] = (!isset($dados['aviso_vencimento']) ? 0 : 1);            $dados['prescricao_interna'] = (!isset($dados['prescricao_interna']) ? 0 : 1);            $dados['antimicrobiano'] = (!isset($dados['antimicrobiano']) ? 0 : 1);            $dados['controlado'] = (!isset($dados['controlado']) ? 0 : 1);            $dados['injetavel'] = (!isset($dados['injetavel']) ? 0 : 1);            $dados['controle_lote_validade'] = (!isset($dados['controle_lote_validade']) ? 0 : 1);            $dados['fracionamento'] = (!isset($dados['fracionamento']) ? 0 : 1);            $dados['estabilidade'] = (empty($dados['estabilidade'])) ? 0 : $dados['estabilidade'];            $dados['ncm'] = (empty($dados['ncm'])) ? 0 : $dados['ncm'];            $dados['pis'] = (empty($dados['pis'])) ? 0 : $dados['pis'];            $dados['cofins'] = (empty($dados['cofins'])) ? 0 : $dados['cofins'];            $dados['cssll'] = (empty($dados['cssll'])) ? 0 : $dados['cssll'];            $dados['icms'] = (empty($dados['icms'])) ? 0 : $dados['icms'];            $dados['substituicao_tributaria'] = (empty($dados['substituicao_tributaria'])) ? 0 : $dados['substituicao_tributaria'];            $dados['cd_kit_vinculado'] = (empty($dados['cd_kit_vinculado'])) ? 0 : $dados['cd_kit_vinculado'];            $dados['cd_anvisa'] = (empty($dados['cd_anvisa'])) ? 0 : $dados['cd_anvisa'];            $rules = [                'nm_produto' => 'required|max:100,'.$_POST['cd_produto'].',cd_produto',                'nm_laboratorio' => 'nullable|max:100',                'ds_produto' => 'nullable|max:150',                'cd_tiss' => 'nullable|max:10|' . ($update ? '' : 'unique:produto'),                'cd_ean' => 'required|max:14',                'cd_produto_divisao' => 'required|numeric|not_in:0',                'via_aplicacao' => 'required_if:medicamento,=,1',                'cd_produto_grupo' => 'required|numeric|not_in:0',                'cd_produto_sub_grupo' => 'required|numeric|not_in:0',                'cd_anvisa' => 'nullable|max:13',                'qtde_embalagem' => 'required|numeric|not_in:0',                'estoque_minimo' => 'required|max:11',                'estabilidade' => 'nullable|max:11',                'ncm' => 'nullable|max:8',                'pis' => 'nullable|max:5',                'cofins' => 'nullable|max:5',                'cssll' => 'nullable|max:5',                'icms' => 'nullable|max:5',                'substituicao_tributaria' => 'nullable|max:5',                'cd_anvisa' => 'nullable|max:13'            ];            $tabProdutos->fill($dados);            $validator = Validator::make($dados, $rules);            if ($validator->fails()) {                return view('materiais/produto/cadastro', $data)->withErrors($validator);            } else {                unset($dados['via_aplicacao']);                if (!empty($id)) { //UPDATE                    $tabProdutos->where('cd_produto', $id)->update($dados);                } else { // INSERT                    $tabProdutos->save();                    $id = $tabProdutos->max('cd_produto');                }                if(isset($via)) {                    DB::table('produto_via_aplicacao')->where('cd_produto', $id)->delete();                    foreach ($via as $v)                        DB::table('produto_via_aplicacao')->insert(['cd_produto' => $id, 'cd_via_aplicacao' => $v]);                }                $request->session()->flash('status', 'Salvo com sucesso!');                return redirect('materiais/produto/cadastro/'.$id);            }        }        return view('materiais/produto/cadastro', $data);    }    public function listar(){        verficaPermissao('recurso.materiais/produto');        $data['headerText'] = 'Produto';        $data['breadcrumbs'][] = ['titulo' => 'Início', 'href' => route('home')];        $data['breadcrumbs'][] = ['titulo' => 'Materiais', 'href' => route('materiais/produtos')];        $data['breadcrumbs'][] = ['titulo' => 'Produto', 'href' => route('materiais/produto/lista')];        if ($_REQUEST) {            $where = [];            $orWhere = [];            if (!empty($_REQUEST['nm_produto'])) {                if(is_numeric($_REQUEST['nm_produto'])){                    $where[] = ['cd_ean', $_REQUEST['nm_produto']];                }                else {                    $where[] = ['nm_produto', 'like', '%' . strtoupper($_REQUEST['nm_produto']) . '%'];                    $orWhere[] = ['ds_produto', 'like', '%' . strtoupper($_REQUEST['nm_produto']) . '%'];                }            }            if ($_REQUEST['situacao'] != 'T') {                $where[] = ['situacao', $_REQUEST['situacao']];            }            $data['lista'] = DB::table('produto as p')                ->where($where)                ->orWhere($orWhere)                ->orderBy('cd_produto')                ->paginate(30)                ->appends($_REQUEST);        }        return view('materiais/produto/lista', $data);    }    public function edita_preco_produto(Request $request){        $dados = $request->except('_token');        $dados['cd_estabelecimento'] = session('estabelecimento');        $dados['id_user'] = session('id_user');        $dados['created_at'] = Carbon::now();        DB::table('produto_plano')            ->updateOrInsert(['cd_estabelecimento' => $dados['cd_estabelecimento'], 'cd_produto' => $dados['cd_produto'], 'cd_plano' => $dados['cd_plano']], $dados);        return json_encode(['success' => true]);    }    public function preenche_select_produto_grupo(){        $produto_grupo =            DB::table('produto_grupo')                ->where('cd_produto_divisao',$_POST['cd_divisao'])                ->get();        return json_encode(['success' => true, 'retorno' => $produto_grupo]);    }    public function preenche_select_produto_sub_grupo(){        $produto_sub_grupo =            DB::table('produto_sub_grupo')                ->where('cd_produto_grupo',$_POST['cd_grupo'])                ->get();        return json_encode(['success' => true, 'retorno' => $produto_sub_grupo]);    }}